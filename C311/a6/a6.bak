#lang racket

(define empty-k
  (λ ()
    (let ((once-only #f))
      (λ (v)
        (if once-only
            (error 'empty-k
                   "You can only invoke the empty continuation once!")
            (begin (set! once-only #t) v))))))

(define apply-k
  (λ (k v)
    (k v)))

(define binary-to-decimal-cps
  (λ (n k)
    (cond
      [(null? n) (apply-k k 0)]
      [else (binary-to-decimal-cps (cdr n) (λ (v) (apply-k k (+ (car n) (* 2 v)))))])))

(binary-to-decimal-cps '() (empty-k))
(binary-to-decimal-cps '(1) (empty-k))
(binary-to-decimal-cps '(0 1) (empty-k))
(binary-to-decimal-cps '(1 1 0 1) (empty-k))

(define times-cps
  (λ (ls k)
    (cond
      [(null? ls) (k 1)]
      [(zero? (car ls)) (k 0)]
      [else (times-cps (cdr ls) (λ (v) (k (* (car ls) v))))])))

(times-cps '(1 2 3 4 5) (empty-k))
(times-cps '(1 2 3 0 3) (empty-k))

(define times-cps-shortcut
  (λ (ls k)
    (cond
      [(null? ls) (k 1)]
      [(zero? (car ls)) 0]
      [else (times-cps (cdr ls) (λ (v) (k (* (car ls) v))))])))

(times-cps-shortcut '(1 2 3 4 5) (empty-k))
(times-cps-shortcut '(1 2 3 0 3) (empty-k))

(define plus-cps
  (λ (m k)
    (k (λ (n k^) (k^ (+ m n))))))

(plus-cps 2 (λ (f) (f 3 (empty-k))))
(plus-cps (plus-cps 2 (λ (f) (f 3 (empty-k)))) (λ (f) (f 5 (empty-k))))

(define remv-first-9*-cps
  (λ (ls k)
    (cond
      [(null? ls) '()]
      [(pair? (car ls))
       (cond
         [(remv-first-9*-cps (car ls) (λ (ra) (k (equal? (car ls) ra))))
          (remv-first-9*-cps (cdr ls) (λ (rd) (k (cons (car ls) rd))))]
         [else (remv-first-9*-cps (car ls) (λ (ra) (k (cons ra (cdr ls)))))])]
      [(eqv? (car ls) '9) (cdr ls)]
      [else (cons (car ls) (remv-first-9*-cps (cdr ls) (empty-k)))])))


(define remv-first-9*
  (lambda (ls)
    (cond
      [(null? ls) '()]
      [(pair? (car ls))
       (cond
         [(equal? (car ls) (remv-first-9* (car ls)))
          (cons (car ls) (remv-first-9* (cdr ls)))]
         [else (cons (remv-first-9* (car ls)) (cdr ls))])]
      [(eqv? (car ls) '9) (cdr ls)]
      [else (cons (car ls) (remv-first-9* (cdr ls)))])))