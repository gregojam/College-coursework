#lang racket

;; lex : LCE empty -> [Listof [Listof X]]
;; returns a list of each bound variable in an LCE paired
;; with its lexical address
(define lex
  (λ (lce ls)
    (match lce
      [`,y #:when (symbol? y) (if (memv y ls)
                                  `(var ,(length (takef ls (λ (e) (not (eqv? e y))))))
                                  '())]
      [`(lambda ,rand ,rator) `(lambda ,(lex rator (append rand ls)))]
      [`(,first ,second) `(,(lex first ls) ,(lex second ls))])))