#lang racket

(define filter-sps
  (λ (pred ls s)
    (cond
      [(null? ls) (values '() s)]
      [(pred (car ls)) (let-values ([(ls2 s2) (filter-sps pred (cdr ls) s)])
                         (values (cons (car ls) ls2) s2))]
      [else (let-values ([(ls2 s2) (filter-sps pred (cdr ls) s)])
              (values ls2 (cons (car ls) s2)))])))

(define fib-sps
  (λ (n s)
    (cond
      [(assv n s)=> (λ (pr) (values (cdr pr) s))]
      [(< n 2) (values n (cons `(,n . ,n) s))]
      [else
       (let-values ([(v s2) (fib-sps (- n 2) s)])
         (let-values([(v2 s3) (fib-sps (- n 1) s2)])
           (values (+ v v2) (cons `(,n . ,(+ v v2)) s3))))])))
         