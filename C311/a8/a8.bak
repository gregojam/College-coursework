#lang racket

(define empty-k
  (λ ()
    `(empty-k)))

(define ack-else-k
  (λ (m^ k^)
    `(else-k ,m^ ,k^)))

(define apply-k
  (λ (k v)
    (match k
      [`(empty-k) v]
      [`(else-k ,m^ ,k^) (ack (sub1 m^) v k^)]
      [else (k v)])))

(define ack
  (lambda (m n k)
    (cond
      [(zero? m) (apply-k k (add1 n))]
      [(zero? n) (ack (sub1 m) 1 k)]
      [else (ack m (sub1 n) (ack-else-k m k))])))

